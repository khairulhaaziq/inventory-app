generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  username    String    @unique
  Password    Password?
  products    Product[]
  UserSession Session[]
  role        Role?     @relation(references: [id], fields: [roleId])
  roleId      Int?
}

model Password {
  id     Int    @id @default(autoincrement())
  userId String @unique
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String   @unique
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  RolePermission RolePermission[]
  User           User[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  isPermitted  Boolean
  role         Role       @relation(references: [id], fields: [roleId], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(references: [id], fields: [permissionId], onDelete: Cascade)
  permissionId Int
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String
  RolePermission RolePermission[]
}

model Product {
  id            Int               @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId    Int?
  user          User?             @relation(fields: [userId], references: [id])
  userId        String?
  inventory     ProductInventory?
  ProductImages ProductImage[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
}

model ProductInventory {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}

model Supplier {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}
